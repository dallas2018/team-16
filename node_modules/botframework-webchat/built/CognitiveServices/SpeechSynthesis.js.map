{"version":3,"file":"SpeechSynthesis.js","sourceRoot":"","sources":["../../src/CognitiveServices/SpeechSynthesis.ts"],"names":[],"mappings":"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","sourcesContent":["import * as konsole from '../Konsole';\nimport { Action, Speech } from '../SpeechModule';\n\nexport interface ICognitiveServicesSpeechSynthesisProperties {\n    subscriptionKey?: string;\n    gender?: SynthesisGender;\n    voiceName?: string;\n    fetchCallback?: (authFetchEventId: string) => Promise<string>;\n    fetchOnExpiryCallback?: (authFetchEventId: string) => Promise<string>;\n}\n\nexport enum SynthesisGender { Male, Female }\n\ninterface SpeakRequest {\n    isReadyToPlay: boolean;\n    data: ArrayBuffer;\n    text: string;\n    locale: string;\n    onSpeakingStarted: Action;\n    onSpeakingFinished: Action;\n}\n\ninterface HttpHeader {\n    name: string;\n    value: string;\n}\n\n// tslint:disable:class-name\n// tslint:disable-next-line:no-empty-interface\ninterface webkitAudioContext extends AudioContext {\n}\n// tslint:enable:class-name\n\ndeclare var webkitAudioContext: {\n    prototype: webkitAudioContext;\n    new(): webkitAudioContext;\n};\n\nexport class SpeechSynthesizer implements Speech.ISpeechSynthesizer {\n    // tslint:disable:variable-name\n    private _requestQueue: SpeakRequest[] = null;\n    private _isPlaying: boolean = false;\n    private _audioElement: AudioContext;\n    private _helper: CognitiveServicesHelper;\n    private _properties: ICognitiveServicesSpeechSynthesisProperties;\n    // tslint:enable:variable-name\n\n    constructor(properties: ICognitiveServicesSpeechSynthesisProperties) {\n        this._helper = new CognitiveServicesHelper(properties);\n        this._properties = properties;\n        this._requestQueue = new Array();\n    }\n\n    speak(text: string, lang: string, onSpeakingStarted: Action = null, onSpeakingFinished: Action = null): void {\n        this._requestQueue.push(\n            {\n                isReadyToPlay: false,\n                data: null,\n                text,\n                locale: lang,\n                onSpeakingStarted,\n                onSpeakingFinished\n            }\n        );\n        this.getSpeechData().then(() => {\n            this.playAudio();\n        });\n    }\n\n    stopSpeaking(): void {\n        if (this._isPlaying) {\n            this._requestQueue = [];\n            this._isPlaying = false;\n            if (this._audioElement && this._audioElement.state !== 'closed') {\n                this._audioElement.close();\n            }\n        }\n    }\n\n    private playAudio() {\n        if (this._requestQueue.length === 0) {\n            return;\n        }\n        const top = this._requestQueue[0];\n        if (!top) {\n            return;\n        }\n        if (!top.isReadyToPlay) {\n            window.setTimeout(() => this.playAudio(), 100);\n            return;\n        }\n        if (!this._isPlaying) {\n            this._isPlaying = true;\n            if (!this._audioElement || this._audioElement.state === 'closed') {\n                if (typeof webkitAudioContext !== 'undefined') {\n                    this._audioElement = new webkitAudioContext();\n                } else {\n                    this._audioElement = new AudioContext();\n                }\n            }\n            this._audioElement.decodeAudioData(top.data, buffer => {\n                const source = this._audioElement.createBufferSource();\n                source.buffer = buffer;\n                source.connect(this._audioElement.destination);\n                if (top.onSpeakingStarted) {\n                    top.onSpeakingStarted();\n                }\n                source.start(0);\n                source.onended = event => {\n                    this._isPlaying = false;\n                    if (top.onSpeakingFinished) {\n                        top.onSpeakingFinished();\n                    }\n                    this._requestQueue = this._requestQueue.slice(1, this._requestQueue.length);\n                    if (this._requestQueue.length > 0) {\n                        this.playAudio();\n                    }\n                };\n            }, ex => {\n                this.log(ex.message);\n                this._isPlaying = false;\n                this._requestQueue = this._requestQueue.slice(1, this._requestQueue.length);\n                if (this._requestQueue.length > 0) {\n                    this.playAudio();\n                }\n            });\n        }\n    }\n\n    private getSpeechData(): Promise<any> {\n        if (this._requestQueue.length === 0) {\n            return;\n        }\n        const latest = this._requestQueue[this._requestQueue.length - 1];\n        return this._helper.fetchSpeechData(latest.text, latest.locale, this._properties).then(result => {\n            latest.data = result;\n            latest.isReadyToPlay = true;\n        }, ex => {\n            // Failed to get the speech data, ignore this item\n            this.log(ex);\n            this._requestQueue = this._requestQueue.slice(0, this._requestQueue.length - 1);\n        });\n    }\n\n    private log(message: string) {\n        konsole.log('CognitiveServicesSpeechSynthesis: ' + message);\n    }\n}\n\nclass CognitiveServicesHelper {\n    // tslint:disable:variable-name\n    private readonly _tokenURL = 'https://api.cognitive.microsoft.com/sts/v1.0/issueToken';\n    private readonly _synthesisURL = 'https://speech.platform.bing.com/synthesize';\n    private readonly _outputFormat = 'riff-16khz-16bit-mono-pcm';\n    private _tokenCallback: (id: string) => Promise<string>;\n    private _tokenExpiredCallback: (id: string) => Promise<string>;\n    private _lastTokenTime: number;\n    // tslint:enable:variable-name\n\n    constructor(props: ICognitiveServicesSpeechSynthesisProperties) {\n        if (props.subscriptionKey) {\n            this._tokenCallback = (id: string) => this.fetchSpeechToken(id);\n            this._tokenExpiredCallback = (id: string) => this.fetchSpeechToken(id);\n        } else if (props.fetchCallback && props.fetchOnExpiryCallback) {\n            this._tokenCallback = props.fetchCallback;\n            this._tokenExpiredCallback = props.fetchOnExpiryCallback;\n        } else {\n            throw new Error('Error: The CognitiveServicesSpeechSynthesis requires either a subscriptionKey or a fetchCallback and a fetchOnExpiryCallback.');\n        }\n    }\n\n    public fetchSpeechData(text: string, locale: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): Promise<any> {\n        const SSML = this.makeSSML(text, locale, synthesisProperties);\n        const cbAfterToken = (token: string) => {\n            this._lastTokenTime = Date.now();\n\n            const optionalHeaders = [\n                { name: 'Content-type', value: 'application/ssml+xml' },\n                { name: 'X-Microsoft-OutputFormat', value: this._outputFormat },\n                { name: 'Authorization', value: token }\n            ];\n\n            return this.makeHttpCall('POST', this._synthesisURL, true, optionalHeaders, SSML);\n        };\n\n        if (Date.now() - this._lastTokenTime > 500000) {\n            return this._tokenExpiredCallback(synthesisProperties.subscriptionKey).then(token => cbAfterToken(token));\n        } else {\n            return this._tokenCallback(synthesisProperties.subscriptionKey).then(token => cbAfterToken(token));\n        }\n    }\n\n    private makeSSML(text: string, locale: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): string {\n        if (text.indexOf('<speak') === 0) {\n            return this.processSSML(text, synthesisProperties);\n        } else {\n            let ssml = '<speak version=\\'1.0\\' xml:lang=\\'' + locale + '\\'><voice xml:lang=\\'' + locale + '\\' xml:gender=\\'' + (synthesisProperties && synthesisProperties.gender ? SynthesisGender[synthesisProperties.gender] : 'Female') + '\\' name=\\'';\n            if (synthesisProperties.voiceName) {\n                ssml += synthesisProperties.voiceName;\n            } else if (synthesisProperties.gender !== null && synthesisProperties.gender !== undefined) {\n                ssml += this.fetchVoiceName(locale, synthesisProperties.gender);\n            } else {\n                ssml += this.fetchVoiceName(locale, SynthesisGender.Female);\n            }\n            return ssml + '\\'>' + this.encodeHTML(text) + '</voice></speak>';\n        }\n    }\n\n    private processSSML(ssml: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): string {\n        let processDone: boolean = false;\n\n        // Extract locale info from ssml\n        let locale: string;\n        const match = /xml:lang=['\"](\\w\\w-\\w\\w)['\"]/.exec(ssml);\n        if (match) {\n            locale = match[1];\n        } else {\n            locale = 'en-us';\n        }\n\n        // Extract gender from properties\n        let gender = synthesisProperties && synthesisProperties.gender;\n        if (gender === null || gender === undefined) {\n            gender = SynthesisGender.Female;\n        }\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(ssml, 'text/xml');\n        const nodes = dom.documentElement.childNodes;\n\n        // Check if there is a voice node\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < nodes.length; ++i) {\n            if (nodes[i].nodeName === 'voice') {\n                // Check if there is a name attribute on voice element\n                // tslint:disable-next-line:prefer-for-of\n                for (let j = 0; j < nodes[i].attributes.length; ++j) {\n                    if (nodes[i].attributes[j].nodeName === 'name') {\n                        // Name attribute is found on voice element, use it directly\n                        processDone = true;\n                        break;\n                    }\n\n                    // Find the gender info from voice element, this will override what is in the properties\n                    if (nodes[i].attributes[j].nodeName === 'xml:gender') {\n                        gender = nodes[i].attributes[j].nodeValue.toLowerCase() === 'male' ? SynthesisGender.Male : SynthesisGender.Female;\n                    }\n                }\n\n                if (!processDone) {\n                    // Otherwise add the name attribute based on locale and gender\n                    const attribute = dom.createAttribute('name');\n                    attribute.value = (synthesisProperties && synthesisProperties.voiceName) || this.fetchVoiceName(locale, gender);\n                    nodes[i].attributes.setNamedItem(attribute);\n                    processDone = true;\n                }\n                break;\n            }\n        }\n        const serializer = new XMLSerializer();\n        if (!processDone) {\n            // There is no voice element, add one based on locale\n            const voiceNode = dom.createElement('voice') as Node;\n            const attribute = dom.createAttribute('name');\n            attribute.value = (synthesisProperties && synthesisProperties.voiceName) || this.fetchVoiceName(locale, gender);\n            voiceNode.attributes.setNamedItem(attribute);\n            while (nodes.length > 0) {\n                voiceNode.appendChild(dom.documentElement.firstChild);\n            }\n            dom.documentElement.appendChild(voiceNode);\n        }\n        return serializer.serializeToString(dom);\n    }\n\n    private encodeHTML(text: string): string {\n        return text.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;');\n    }\n\n    private fetchSpeechToken(apiKey: string): Promise<string> {\n        const optionalHeaders: HttpHeader[] = [{ name: 'Ocp-Apim-Subscription-Key', value: apiKey },\n        // required for Firefox otherwise a CORS error is raised\n        { name: 'Access-Control-Allow-Origin', value: '*' }];\n        return this.makeHttpCall('POST', this._tokenURL, false, optionalHeaders).then(text => {\n            konsole.log('New authentication token generated.');\n            return Promise.resolve(text);\n        }, ex => {\n            const reason = 'Failed to generate authentication token';\n            konsole.log(reason);\n            return Promise.reject(reason);\n        });\n    }\n\n    private makeHttpCall(actionType: string, url: string, isArrayBuffer: boolean = false, optionalHeaders?: HttpHeader[], dataToSend?: any): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            if (isArrayBuffer) {\n                xhr.responseType = 'arraybuffer';\n            }\n            xhr.onreadystatechange = event => {\n                if (xhr.readyState !== 4) { return; }\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    if (!isArrayBuffer) {\n                        resolve(xhr.responseText);\n                    } else {\n                        resolve(xhr.response);\n                    }\n                } else {\n                    reject(xhr.status);\n                }\n            };\n            try {\n                xhr.open(actionType, url, true);\n                if (optionalHeaders) {\n                    optionalHeaders.forEach(header => {\n                        xhr.setRequestHeader(header.name, header.value);\n                    });\n                }\n                if (dataToSend) {\n                    xhr.send(dataToSend);\n                } else {\n                    xhr.send();\n                }\n            } catch (ex) {\n                reject(ex);\n            }\n        });\n    }\n\n    private fetchVoiceName(locale: string, gender: SynthesisGender): string {\n        let voiceName: string;\n        const localeLowerCase = locale.toLowerCase();\n        if (gender === SynthesisGender.Female) {\n            voiceName = this._femaleVoiceMap[localeLowerCase] || this._femaleVoiceMap['en-us'];\n        } else {\n            voiceName = this._maleVoiceMap[localeLowerCase] || this._maleVoiceMap['en-us'];\n        }\n        return voiceName;\n    }\n\n    // source: https://docs.microsoft.com/en-us/azure/cognitive-services/speech/api-reference-rest/bingvoiceoutput\n    // tslint:disable-next-line:variable-name\n    private readonly _femaleVoiceMap: { [key: string]: string } = {\n        'ar-eg': 'Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)',\n        'ca-es': 'Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)',\n        'da-dk': 'Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)',\n        'de-de': 'Microsoft Server Speech Text to Speech Voice (de-DE, Hedda)',\n        'en-au': 'Microsoft Server Speech Text to Speech Voice (en-AU, Catherine)',\n        'en-ca': 'Microsoft Server Speech Text to Speech Voice (en-CA, Linda)',\n        'en-gb': 'Microsoft Server Speech Text to Speech Voice (en-GB, Susan, Apollo)',\n        'en-in': 'Microsoft Server Speech Text to Speech Voice (en-IN, Heera, Apollo)',\n        'en-us': 'Microsoft Server Speech Text to Speech Voice (en-US, ZiraRUS)',\n        'es-es': 'Microsoft Server Speech Text to Speech Voice (es-ES, Laura, Apollo)',\n        'es-mx': 'Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)',\n        'fi-fi': 'Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)',\n        'fr-ca': 'Microsoft Server Speech Text to Speech Voice (fr-CA, Caroline)',\n        'fr-fr': 'Microsoft Server Speech Text to Speech Voice (fr-FR, Julie, Apollo)',\n        'hi-in': 'Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana, Apollo)',\n        'ja-jp': 'Microsoft Server Speech Text to Speech Voice (ja-JP, Ayumi, Apollo)',\n        'ko-kr': 'Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)',\n        'nb-no': 'Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)',\n        'nl-nl': 'Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)',\n        'pl-pl': 'Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)',\n        'pt-br': 'Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)',\n        'pt-pt': 'Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)',\n        'ru-ru': 'Microsoft Server Speech Text to Speech Voice (ru-RU, Irina, Apollo)',\n        'sv-se': 'Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)',\n        'tr-tr': 'Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)',\n        'zh-cn': 'Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)',\n        'zh-hk': 'Microsoft Server Speech Text to Speech Voice (zh-HK, Tracy, Apollo)',\n        'zh-tw': 'Microsoft Server Speech Text to Speech Voice (zh-TW, Yating, Apollo)'\n    };\n\n    // tslint:disable-next-line:variable-name\n    private readonly _maleVoiceMap: { [key: string]: string } = {\n        'ar-sa': 'Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)',\n        'cs-cz': 'Microsoft Server Speech Text to Speech Voice (cs-CZ, Vit)',\n        'de-at': 'Microsoft Server Speech Text to Speech Voice (de-AT, Michael)',\n        'de-ch': 'Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)',\n        'de-de': 'Microsoft Server Speech Text to Speech Voice (de-DE, Stefan, Apollo)',\n        'el-gr': 'Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)',\n        'en-gb': 'Microsoft Server Speech Text to Speech Voice (en-GB, George, Apollo)',\n        'en-ie': 'Microsoft Server Speech Text to Speech Voice (en-IE, Shaun)',\n        'en-in': 'Microsoft Server Speech Text to Speech Voice (en-IN, Ravi, Apollo)',\n        'en-us': 'Microsoft Server Speech Text to Speech Voice (en-US, BenjaminRUS)',\n        'es-es': 'Microsoft Server Speech Text to Speech Voice (es-ES, Pablo, Apollo)',\n        'es-mx': 'Microsoft Server Speech Text to Speech Voice (es-MX, Raul, Apollo)',\n        'fr-ch': 'Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)',\n        'fr-fr': 'Microsoft Server Speech Text to Speech Voice (fr-FR, Paul, Apollo)',\n        'he-il': 'Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)',\n        'hi-in': 'Microsoft Server Speech Text to Speech Voice (hi-IN, Hemant)',\n        'hu-hu': 'Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)',\n        'id-id': 'Microsoft Server Speech Text to Speech Voice (id-ID, Andika)',\n        'it-it': 'Microsoft Server Speech Text to Speech Voice (it-IT, Cosimo, Apollo)',\n        'ja-jp': 'Microsoft Server Speech Text to Speech Voice (ja-JP, Ichiro, Apollo)',\n        'pt-br': 'Microsoft Server Speech Text to Speech Voice (pt-BR, Daniel, Apollo)',\n        'ro-ro': 'Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)',\n        'ru-ru': 'Microsoft Server Speech Text to Speech Voice (ru-RU, Pavel, Apollo)',\n        'sk-sk': 'Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)',\n        'th-th': 'Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)',\n        'zh-cn': 'Microsoft Server Speech Text to Speech Voice (zh-CN, Kangkang, Apollo)',\n        'zh-hk': 'Microsoft Server Speech Text to Speech Voice (zh-HK, Danny, Apollo)',\n        'zh-tw': 'Microsoft Server Speech Text to Speech Voice (zh-TW, Zhiwei, Apollo)'\n    };\n}\n"]}