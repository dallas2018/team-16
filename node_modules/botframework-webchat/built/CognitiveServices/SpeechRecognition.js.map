{"version":3,"file":"SpeechRecognition.js","sourceRoot":"","sources":["../../src/CognitiveServices/SpeechRecognition.ts"],"names":[],"mappings":"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","sourcesContent":["import * as CognitiveSpeech from 'microsoft-speech-browser-sdk/Speech.Browser.Sdk';\nimport updateIn from 'simple-update-in';\nimport * as konsole from '../Konsole';\nimport { Action, Func, Speech } from '../SpeechModule';\n\nexport interface ISpeechContextDgiGroup {\n    Type: string;\n    Hints?: { ReferenceGrammar: string };\n    Items?: Array<{ Text: string }>;\n}\n\nexport interface ISpeechContext {\n    dgi: { Groups: ISpeechContextDgiGroup[] };\n}\n\nexport interface ICognitiveServicesSpeechRecognizerProperties {\n    locale?: string;\n    subscriptionKey?: string;\n    fetchCallback?: (authFetchEventId: string) => Promise<string>;\n    fetchOnExpiryCallback?: (authFetchEventId: string) => Promise<string>;\n}\n\nexport class SpeechRecognizer implements Speech.ISpeechRecognizer {\n    public audioStreamStartInitiated: boolean = false;\n    public isStreamingToService: boolean = false;\n    public onIntermediateResult: Func<string, void> = null;\n    public onFinalResult: Func<string, void> = null;\n    public onAudioStreamingToService: Action = null;\n    public onRecognitionFailed: Action = null;\n    public locale: string = null;\n    public referenceGrammarId: string;\n\n    private actualRecognizer: any = null;\n    private grammars: string[] = null;\n    private properties: ICognitiveServicesSpeechRecognizerProperties;\n\n    constructor(properties: ICognitiveServicesSpeechRecognizerProperties = {}) {\n        this.properties = properties;\n        const recognitionMode = CognitiveSpeech.RecognitionMode.Interactive;\n        const format = CognitiveSpeech.SpeechResultFormat.Simple;\n        const locale = properties.locale || 'en-US';\n\n        const recognizerConfig = new CognitiveSpeech.RecognizerConfig(\n            new CognitiveSpeech.SpeechConfig(\n                new CognitiveSpeech.Context(\n                    new CognitiveSpeech.OS(navigator.userAgent, 'Browser', null),\n                    new CognitiveSpeech.Device('WebChat', 'WebChat', '1.0.00000'))),\n            recognitionMode,        // Speech.RecognitionMode.Interactive  (Options - Interactive/Conversation/Dictation>)\n            locale,                 // Supported laguages are specific to each recognition mode. Refer to docs.\n            format\n        );                // Speech.SpeechResultFormat.Simple (Options - Simple/Detailed)\n\n        let authentication;\n        if (properties.subscriptionKey) {\n            authentication = new CognitiveSpeech.CognitiveSubscriptionKeyAuthentication(properties.subscriptionKey);\n        } else if (properties.fetchCallback && properties.fetchOnExpiryCallback) {\n            authentication = new CognitiveSpeech.CognitiveTokenAuthentication(\n                (authFetchEventId: string) => {\n                    const d = new CognitiveSpeech.Deferred<string>();\n                    this.properties.fetchCallback(authFetchEventId).then(\n                        value => d.Resolve(value),\n                        err => d.Reject(err)\n                    );\n                    return d.Promise();\n                },\n                (authFetchEventId: string) => {\n                    const d = new CognitiveSpeech.Deferred<string>();\n                    this.properties.fetchOnExpiryCallback(authFetchEventId).then(\n                        value => d.Resolve(value),\n                        err => d.Reject(err)\n                    );\n                    return d.Promise();\n                }\n            );\n        } else {\n            throw new Error('Error: The CognitiveServicesSpeechRecognizer requires either a subscriptionKey or a fetchCallback and fetchOnExpiryCallback.');\n        }\n\n        if (\n            window.navigator.getUserMedia\n            || (window.navigator.mediaDevices && window.navigator.mediaDevices.getUserMedia)\n        ) {\n            this.actualRecognizer = CognitiveSpeech.CreateRecognizer(recognizerConfig, authentication);\n        } else {\n            console.error('This browser does not support speech recognition');\n        }\n    }\n\n    // tslint:disable-next-line:no-empty\n    public warmup() {\n    }\n\n    public setGrammars(grammars: string[]) {\n        this.grammars = grammars;\n    }\n\n    public async startRecognizing() {\n        if (!this.actualRecognizer) {\n            this.log('ERROR: no recognizer?');\n            return;\n        }\n        const eventhandler = (event: any) => {\n            this.log(event.Name);\n            switch (event.Name) {\n                case 'RecognitionTriggeredEvent':\n                case 'ListeningStartedEvent':\n                case 'SpeechStartDetectedEvent':\n                case 'SpeechEndDetectedEvent':\n                case 'SpeechDetailedPhraseEvent':\n                case 'ConnectingToServiceEvent':\n                    break;\n                case 'RecognitionStartedEvent':\n                    if (this.onAudioStreamingToService) {\n                        this.onAudioStreamingToService();\n                    }\n                    this.isStreamingToService = true;\n                    break;\n                case 'SpeechHypothesisEvent':\n                    const hypothesisEvent = event as CognitiveSpeech.SpeechHypothesisEvent;\n                    this.log('Hypothesis Result: ' + hypothesisEvent.Result.Text);\n                    if (this.onIntermediateResult) {\n                        this.onIntermediateResult(hypothesisEvent.Result.Text);\n                    }\n                    break;\n                case 'SpeechSimplePhraseEvent':\n                    const simplePhraseEvent = event as CognitiveSpeech.SpeechSimplePhraseEvent;\n                    if (CognitiveSpeech.RecognitionStatus[simplePhraseEvent.Result.RecognitionStatus] as any === CognitiveSpeech.RecognitionStatus.Success) {\n                        if (this.onFinalResult) {\n                            this.onFinalResult(simplePhraseEvent.Result.DisplayText);\n                        }\n                    } else {\n                        if (this.onRecognitionFailed) {\n                            this.onRecognitionFailed();\n                        }\n                        this.log('Recognition Status: ' + simplePhraseEvent.Result.RecognitionStatus.toString());\n                    }\n                    break;\n                case 'RecognitionEndedEvent':\n                    this.isStreamingToService = false;\n                    break;\n                default:\n                    this.log(event.Name + ' is unexpected');\n            }\n        };\n\n        let speechContext: ISpeechContext;\n\n        if (this.referenceGrammarId) {\n            speechContext = updateIn(speechContext, ['dgi', 'Groups'], (groups: any[] = []) => [...groups, {\n                Type: 'Generic',\n                Hints: { ReferenceGrammar: this.referenceGrammarId }\n            }]);\n        }\n\n        if (this.grammars) {\n            speechContext = updateIn(speechContext, ['dgi', 'Groups'], (groups: any[] = []) => [...groups, {\n                Type: 'Generic',\n                Items: this.grammars.map(grammar => ({ Text: grammar }))\n            }]);\n        }\n\n        return this.actualRecognizer.Recognize(eventhandler, speechContext && JSON.stringify(speechContext));\n    }\n\n    public speechIsAvailable() {\n        return this.actualRecognizer != null;\n    }\n\n    public async stopRecognizing() {\n        if (this.actualRecognizer != null) {\n            this.actualRecognizer.AudioSource.TurnOff();\n        }\n\n        this.isStreamingToService = false;\n\n        return;\n    }\n\n    private log(message: string) {\n        konsole.log('CognitiveServicesSpeechRecognizer: ' + message);\n    }\n}\n"]}